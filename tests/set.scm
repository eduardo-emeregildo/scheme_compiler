(display "using set! on globals, should print 5,4:")
(define x 5)
(display x)
(set! x 4)
(display x)

(display "using set! on a captured variable,should print 3,4,4,4:")
(define (outer)
  (define loc 3)
  (define (inner)
    (display loc)
    (set! loc 4)
    (display loc))
  inner)
(define yeo (outer))
(yeo)
(yeo)

(display "example from crafting interpreters, should print updated:")
(define globalSet 0)
(define globalGet 1)
(define (main_func)
  (define a "initial")
  (define (setter) (set! a "updated"))
  (define (getter) (display a))
  (set! globalSet setter) (set! globalGet getter))
(main_func)
(globalSet)
(globalGet)

(define (func req . varargs)
    (define (bar) (set! varargs 10))
    (bar) 
    (+ req varargs)) ; varargs was set to a number, so sum should work
(display (func 1 2 3 4 5)) ; should print 11

(display "using closures to imitate classes:")
(define (make_balance)
  (define value 0)
  (define (bal method)
    (define (add_method x)
      (set! value (+ value x)))
    (define (get_method) (display value))
    (if (equal? method "add")
        add_method
        get_method))
  bal)

(define a (make_balance))
((a "get"))
((a "add") 3)
((a "get"))

(define b (make_balance))
((b "add") -1)
((b "get"))
((a "get"))